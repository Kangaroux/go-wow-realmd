package main

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_passVerify(t *testing.T) {
	type testCase struct {
		username string
		password string
		salt     string
		expected string
	}

	// First 10 testCases from:
	// https://gtker.com/implementation-guide-for-the-world-of-warcraft-flavor-of-srp6/verification_values/calculate_v_values.txt
	testCases := []testCase{
		{"LF2BGFQIFQ3HZ1ZF", "MVRVMUJFWRA0IBVK", "AFE5D28E925DBB3DAFED5D91ACA0928940E8FBFEF2D2A3CC154ADA0FE6ABEF6F", "21B4153B0A938D0A69D28F2690CC3F79A99A13C40CACB525B3B79D4201EB33FF"},
		{"TL2XRNJ09DGYK9MQ", "MHMUJMEIX8LGRKZ6", "FCAD0C7D6BD03F3DCE8AEB9C64FF1D1550EDB77BF9F1EF2CE437D83C9150DEC1", "0C12CF1EB9855705B21B3E0EC9AB2807A6F660659C7C62040E43AE3908B9B827"},
		{"1LGT7JVQ29N79FIG", "IL4ZXPC440CFFK9A", "5DCC9CFAD04F1CDFDE58A9D76211D79D7A8EFAC4ECC8EFA43FF4AC52FBB0CE9A", "18AD8E1169E8DDFF4CD1513E35958B8D929AC09CCA3C7D65120DE860A711F1DC"},
		{"8ACOYJOYZNKC7F9M", "YJPND51QB9HQDKJ2", "4ABA2F715C0E92FD73CA154F6820D8A73D268B0D76BFE952F8EA5DFECB152DD4", "13951E42C3C1126E30ED6142A1BC9FD98C1AC67548102137A161B64AD398AAB9"},
		{"FB81TKOIMJ0ZHL5W", "J2ZCUVI42BJC1K7I", "B0E680DD2DBB8EB6EED4624E5CC8E78DAC57F4CCAACB04AEC86AF48B4A45F38E", "4D4AD0E1D19E0527C54C79497FD50602A9A0E30D8EBEA005CAE3DF9E098884CE"},
		{"ASAXNEO9O9O9PC7E", "3R72J2RJAWB7VE9T", "9AAEC1D1EDD9E0FF97B0400CCD744E3E3C15BE4C62CB82A1AB2953E5595C9B31", "77A0AACB0427381D67A832C2D2704D762DB01D558FDE2D79EEBB40697D67D788"},
		{"NW8FFHXOI3D5TDH4", "HP4RKUMSO13L16ZJ", "7E7BFDDAB232AB9328AC2C9BB3B40BDBACAB9CCCFE9BDC6EEC704BA2B65443A6", "6ACFC3A152E23BD367949B93D4E460447562FC8921B74DF28317342720736B72"},
		{"RDL7YCLB6QL3Y40X", "C63MYZK061FQ1TAJ", "AA08C8DCE74FE0DECCCA7EC3FABCA6EA6C015CA9B97C750A88F03EB9AB478ABF", "3C5C6F755D6FEFBD35C7A520C4FD33B623AC27B4039D68F90F14CF6E631235E9"},
		{"8F6TYYE7OXZUMYEM", "8V1QAMPZ51FBO6NR", "09CE0BFECFAE1C2EA79DD8A87B4CCB4FF2F4EA4F8E35A6889580AEBAE1F95925", "62C100DC3AE4BECFB1E58445847F95BF7E81CCCD65B6DB3F1EC2ED8C87BDE344"},
		{"D61MXHXTJTHM2N7Y", "2VL37KANR9NQHND6", "0B8DE644B7ABDBEBDC615E89C4E56A2FD3D171C5F8E9AFC55A5D8FFB1ABFA6AA", "1E908AD2EE91F76AAB18BC6163B2A55996A1E86AD161F33F9EC77D30FDD7F2BF"},
	}

	for _, tc := range testCases {
		salt, err := hex.DecodeString(tc.salt)
		if err != nil {
			panic(err)
		}
		ReverseBytes(salt)

		expected, err := hex.DecodeString(tc.expected)
		if err != nil {
			panic(err)
		}
		ReverseBytes(expected)

		assert.Equal(t, expected, passVerify(tc.username, tc.password, salt))
	}
}

func Test_calcX(t *testing.T) {
	type testCase struct {
		salt     string
		expected string
	}

	// First 10 testCases from:
	// https://gtker.com/implementation-guide-for-the-world-of-warcraft-flavor-of-srp6/verification_values/calculate_x_salt_values.txt
	testCases := []testCase{
		{"CAC94AF32D817BA64B13F18FDEDEF92AD4ED7EF7AB0E19E9F2AE13C828AEAF57", "D927E98BE3E9AF84FDC99DE9034F8E70ED7E90D6"},
		{"0CE6107EAC9DBBED6C7AD14EB0D4DDFBAAB82BE636F4EFF23B2A5E39EEC16A4B", "D30F36712DBB25FFAD213AE1F8E6A836FC9512DC"},
		{"422E5E9DE1CD44BF81D64FCB8BAE78F23C66C3E323D3DBC0FEEFC991475CECFA", "FC4EC39D5AAD4875F3B706EB3D10DAE7C7742273"},
		{"E0EDCFCA5AF8A23FFE02D505EB4BD34C0BAD4228DC3EC0975EADF18214F9C960", "0BF89E0845FC52040C8227D9F54C6D0E800B3C2B"},
		{"E5E8E756C71E1674CFD385FBB1FCD9A9A19A6454D6CF6C0DEBF9B6DDCD46B2A3", "BFEF246D5F39B46B2CF1D789748EF6885EE1854B"},
		{"B6DDDFBEBB9BBA928A3E76150BF1BFA306DA6BDAB2BD7043B87D0DEA3C45ADE6", "0CA7F727D8DBBCACB51E51E1E848C8EA12A53399"},
		{"EF969E1EE76DCCEFCF05288F5EBB2DB13A429DD8B35BAE2EE2E603B2EB1F1F0F", "9D4D2352AD71BC4256225FF7C18902548F15B13E"},
		{"96E1AA3F3DA9CB15AD05D304DB5E36703E2DEFCFD0FCC1E6452B6306C89F9DC6", "35FFFEEC0C5D4623D693B55B4C39A6648417A575"},
		{"FFCDF9AED1A5EC3D56CB0BFE6026A5CFA6CCCDDCCEBFF6FC7AC0F5A71ACC54E8", "5840003306F80C70FDBD0E692F3866629E6CB92B"},
		{"CADD8EEBE2FD8BCACDCDCEE3BEA0BF4F0928EC463E70E07CCAA05CD91A44DC1F", "73AB2AACD12BB1A5E1AF467CF2F46F0B76F5418C"},
	}

	username := "USERNAME123"
	password := "PASSWORD123"

	for _, tc := range testCases {
		salt, err := hex.DecodeString(tc.salt)
		if err != nil {
			panic(err)
		}
		ReverseBytes(salt)

		expected, err := hex.DecodeString(tc.expected)
		if err != nil {
			panic(err)
		}
		ReverseBytes(expected)

		assert.Equal(t, expected, calcX(username, password, salt))
	}
}
